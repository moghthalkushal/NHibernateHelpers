<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\bin\Release\NHibernateHelper.Infrastructure.dll">
   <Modules>
    <Module Name="nhibernatehelper.infrastructure.dll">
     <Namespaces>
      <Namespace Name="NHibernateHelper.Infrastructure.DataAccess.Extensions">
       <Types>
        <Type Name="FluentExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddFromAssemblyOf`1(FluentNHibernate.Cfg.FluentMappingsContainer,System.Predicate`1&lt;System.Type&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Extensions" File="FluentExtensions.cs" Line="11">Consider a design where 'FluentExtensions.AddFromAssemblyOf&lt;T&gt;(this FluentMappingsContainer, Predicate&lt;Type&gt;)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Extensions" File="FluentExtensions.cs" Line="12">In externally visible method 'FluentExtensions.AddFromAssemblyOf&lt;T&gt;(this FluentMappingsContainer, Predicate&lt;Type&gt;)', validate parameter 'mappings' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsDate(FluentNHibernate.Mapping.PropertyPart)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Extensions" File="FluentExtensions.cs" Line="30">In externally visible method 'FluentExtensions.AsDate(this PropertyPart)', validate parameter 'map' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsDateTime2(FluentNHibernate.Mapping.PropertyPart)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Extensions" File="FluentExtensions.cs" Line="26">In externally visible method 'FluentExtensions.AsDateTime2(this PropertyPart)', validate parameter 'map' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsYesNoBoolean(FluentNHibernate.Mapping.PropertyPart)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Extensions" File="FluentExtensions.cs" Line="34">In externally visible method 'FluentExtensions.AsYesNoBoolean(this PropertyPart)', validate parameter 'map' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernateHelper.Infrastructure.DataAccess.Impl">
       <Types>
        <Type Name="StatelessRepository`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExecuteNamedQuerySQL`1(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Impl" File="StatelessRepository.cs" Line="114">Consider a design where 'StatelessRepository&lt;T1&gt;.ExecuteNamedQuerySQL&lt;T&gt;(string, IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;)' doesn't nest generic type 'IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteUniqueNamedQuery`1(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Impl" File="StatelessRepository.cs" Line="127">Consider a design where 'StatelessRepository&lt;T1&gt;.ExecuteUniqueNamedQuery&lt;T&gt;(string, IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;)' doesn't nest generic type 'IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteUpdateNamedQuery(System.String,System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DataAccess\Impl" File="StatelessRepository.cs" Line="136">Consider a design where 'StatelessRepository&lt;T1&gt;.ExecuteUpdateNamedQuery(string, IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;)' doesn't nest generic type 'IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernateHelper.Infrastructure.DependencyResolution">
       <Types>
        <Type Name="SqlServerRegistry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-09-20 05:15:12Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\kkuma24\Desktop\Source Codes\Test Nhib\NhibernateHelper\Infrastructure\DependencyResolution" File="SqlServerRegistry.cs" Line="20">In method 'SqlServerRegistry.SqlServerRegistry()', call System.IDisposable.Dispose on object 'new Repository&lt;SqlServer&gt;(ctx.GetInstance&lt;ISessionFactory&gt;(this.sql))' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182150.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
